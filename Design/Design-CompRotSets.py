import os
import sys
import tempfile
import tarfile
import shutil

from docopt import docopt
from BindingSitesFromFragments.design import fuzzball_composition_design
from BindingSitesFromFragments.benchmarks.binding_interface_recovery import consolidate_design_sequences

def design(args):
    """
    Design the context around the ligand in a protein-ligand complex

    Usage: bsff design <ligand_conformer_path> <match_path> <match_residue_map> <params_path> [options]

    Arguments:
      <ligand_conformer_path>           Path to ligand PDB generated by molfile_to_params.py
      <match_path>                      Path to scaffold-ligand match PDB
      <match_residue_map>               Pickle file generated by a bsff.assemble iteration
      <params_path>                     Path to the ligand params file generated by molfile_to_params.py

    Options:
      -c=<cstfile>, --match_cst=<cstfile>           Apply match constraints from .cst file during design
      -d=<dir>, --design_dir=<dir>                  Directory to dump designs into
      -h=<path>, --holesfilter=<path>               Path to DAlphaBall.gcc Holes Filter
      -l=<limit>, --rotset_limit=<limit>            Limit of rotamers added per residue identity per position
      -m, --apply_minimization                      Apply minimization before accepting/rejecting rotamers
      -n=<nstruct>, --nstruct=<nstruct>             Number of design trajectories to attempt
      -r=<rmsd>, --rmsd=<rmsd>                      RMSD to use for accepting complementary rotamerset rotamers
      -w=<weight>, --special_rot_weight=<weight>    Weight for complementary rotamers during design
      -x, --disable_rotamersets                     Don't use complementary rotamersets during design
    """
    print(args)

    ligand_conformer_path = args['<ligand_conformer_path>']
    match_path = args['<match_path>']
    match_residue_map = args['<match_residue_map>']
    params_path = args['<params_path>']
    dalphapath = args['--holesfilter']

    # nstruct 100
    # 5000 designs/weight/scaffold
    # weights: 14 total, arange(-10,0,2) U arange(-5, 0, 0.5)

    # weights = [-10, -8, -6, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]
    weights = [-4, -3, -1.5, 0]
    taskid = int(os.environ.get('SGE_TASK_ID'))
    total_tasks = int(os.environ.get('SGE_TASK_LAST'))
    special_rot_weight = weights[(taskid - 1) // int(total_tasks/len(weights))]

    design_dir_name = args['--design_dir'] if args['--design_dir'] else f'Designs-taskid_{taskid}-weight_{special_rot_weight}'
    rotset_limit = int(args['--rotset_limit']) if args['--rotset_limit'] else 50
    nstruct = int(args['--nstruct']) if args['--nstruct'] else 100
    rmsd = args['--rmsd'] if args['--rmsd'] else 1.5

    with tempfile.TemporaryDirectory(dir=os.environ.get('TMPDIR')) as working_temp_dir:
        design_dir = os.path.join(working_temp_dir, design_dir_name)
        design_pdbs_dir = os.path.join(design_dir, design_dir_name)
        design_metrics = fuzzball_composition_design(ligand_conformer_path, match_path, match_residue_map, params_path,
                                                     rotset_limit=rotset_limit, nstruct=nstruct, apply_minimization=args['--apply_minimization'],
                                                     special_rot_weight=special_rot_weight, designdir=design_pdbs_dir, rmsd=rmsd,
                                                     use_complementary_rotsets=True, dalphaball_path=dalphapath)
        design_metrics.to_csv(os.path.join(design_dir, 'design_metrics.csv'))

        # tar ball designs
        with tarfile.open(os.path.join(design_dir, f'Designs-taskid_{taskid}-weight_{special_rot_weight}.tar.gz'), 'w:gz') as tar:
            tar.add(design_pdbs_dir, arcname=os.path.basename(design_pdbs_dir))
        shutil.rmtree(design_pdbs_dir)

        shutil.move(design_dir, os.environ.get('SGE_O_WORKDIR'))

    # Perform design without complementary rotamersets
    if special_rot_weight == 0:

        with tempfile.TemporaryDirectory(dir=os.environ.get('TMPDIR')) as working_temp_dir:
            design_dir_name = f'Designs-taskid_{taskid}-NoCompRotSet'
            design_dir = os.path.join(working_temp_dir, design_dir_name)
            design_pdbs_dir = os.path.join(design_dir, design_dir_name)
            design_metrics = fuzzball_composition_design(ligand_conformer_path, match_path, match_residue_map, params_path,
                                                         rotset_limit=rotset_limit, nstruct=nstruct, apply_minimization=args['--apply_minimization'],
                                                         special_rot_weight=special_rot_weight, designdir=design_pdbs_dir, rmsd=rmsd,
                                                         use_complementary_rotsets=False, dalphaball_path=dalphapath)
            design_metrics.to_csv(os.path.join(design_dir, 'design_metrics.csv'))

            # tar ball designs
            with tarfile.open(os.path.join(design_dir, f'Designs-taskid_{taskid}-NoCompRotSet.tar.gz'), 'w:gz') as tar:
                tar.add(design_pdbs_dir, arcname=os.path.basename(design_pdbs_dir))
            shutil.rmtree(design_pdbs_dir)

            shutil.move(design_dir, os.environ.get('SGE_O_WORKDIR'))

if __name__ == '__main__':
    argv = sys.argv[1:]
    print(argv)
    design(docopt(design.__doc__, argv=argv))